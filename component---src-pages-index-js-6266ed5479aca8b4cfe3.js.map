{"version":3,"file":"component---src-pages-index-js-6266ed5479aca8b4cfe3.js","mappings":"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","sources":["webpack://hangeul-practice/./src/pages/index.js","webpack://hangeul-practice/./node_modules/hangul-js/hangul.js"],"sourcesContent":["import * as React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport Hangul from \"hangul-js\"\n\nimport '../styles/index.css'\n\nconst cachedWordsKey = \"all-hangeul-words\"\nasync function fetchWords() {\n  return await fetch('https://raw.githubusercontent.com/uniglot/korean-word-ipa-dictionary/main/scripts/lookup-tables/kodict_entry.txt')\n  .then( f => f.text() )\n  .then(t => t.split('\\n').slice(1))\n}\n\nfunction speakWord(word) {\n  let utterance = new SpeechSynthesisUtterance()\n  //utterance.voice = voice\n  utterance.text = word\n  // utterance.lang = 'ko'\n  utterance.volume = 1\n\n  speechSynthesis.speak(utterance)\n}\n\nlet allWords = []\nconst IndexPage = () => {\n  const [isLoading, setLoading] = useState(true)\n  const [currentWord, setCurrentWord] = useState('')\n  const [currentDecompo, setDecomposition] = useState([])\n\n  const decomposeWord = (word) => {\n    let jamo = Hangul.disassemble(word)\n    setDecomposition([...new Set(jamo)])\n  }\n\n  const pickRandomWord = ()=>{\n    if (allWords.length === 0) {\n      setCurrentWord(\"\")\n      return\n    }\n    setDecomposition([])\n\n    let index = Math.trunc(Math.random() * allWords.length)\n    console.log(index)\n\n    const pickedWord = allWords[index]\n    setCurrentWord(pickedWord)\n\n    decomposeWord(pickedWord)\n  }\n\n  useEffect(() => {\n    fetchWords()\n      .then(result => {\n        setLoading(false)\n\n        allWords = result\n\n        pickRandomWord()\n      })\n      .catch(console.error)\n  }, [])\n\n  return (\n    <main>\n      { isLoading ? <p>Loading...</p> : <></>}\n\n      <div id=\"jamo-container\">\n        {\n          currentDecompo.map(j => (\n            <span key={j} className='jamo-item'>{j}</span>\n          ))\n        }\n      </div>\n\n      <h1>{currentWord}</h1>\n      \n      <button onClick={pickRandomWord}>Random</button>\n      <button onClick={()=>speakWord(currentWord)}>Play</button>\n    </main>\n  )\n}\n\nexport default IndexPage\n\nexport const Head = () => <>\n  <title>Hangeul Practice</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n</>\n","/**\r\n * Hangul.js\r\n * https://github.com/e-/Hangul.js\r\n *\r\n * Copyright 2017, Jaemin Jo\r\n * under the MIT license.\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    var CHO = [\r\n        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',\r\n        'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',\r\n        'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ',\r\n        'ㅍ', 'ㅎ'\r\n    ],\r\n        JUNG = [\r\n            'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',\r\n            'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', ['ㅗ', 'ㅏ'], ['ㅗ', 'ㅐ'],\r\n            ['ㅗ', 'ㅣ'], 'ㅛ', 'ㅜ', ['ㅜ', 'ㅓ'], ['ㅜ', 'ㅔ'], ['ㅜ', 'ㅣ'],\r\n            'ㅠ', 'ㅡ', ['ㅡ', 'ㅣ'], 'ㅣ'\r\n        ],\r\n        JONG = [\r\n            '', 'ㄱ', 'ㄲ', ['ㄱ', 'ㅅ'], 'ㄴ', ['ㄴ', 'ㅈ'], ['ㄴ', 'ㅎ'], 'ㄷ', 'ㄹ',\r\n            ['ㄹ', 'ㄱ'], ['ㄹ', 'ㅁ'], ['ㄹ', 'ㅂ'], ['ㄹ', 'ㅅ'], ['ㄹ', 'ㅌ'], ['ㄹ', 'ㅍ'], ['ㄹ', 'ㅎ'], 'ㅁ',\r\n            'ㅂ', ['ㅂ', 'ㅅ'], 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        HANGUL_OFFSET = 0xAC00,\r\n        CONSONANTS = [\r\n            'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄸ',\r\n            'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ',\r\n            'ㅁ', 'ㅂ', 'ㅃ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ',\r\n            'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLETE_CHO = [\r\n            'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',\r\n            'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',\r\n            'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLETE_JUNG = [\r\n            'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',\r\n            'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ',\r\n            'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ',\r\n            'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'\r\n        ],\r\n        COMPLETE_JONG = [\r\n            '', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ',\r\n            'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ',\r\n            'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLEX_CONSONANTS = [\r\n            ['ㄱ', 'ㅅ', 'ㄳ'],\r\n            ['ㄴ', 'ㅈ', 'ㄵ'],\r\n            ['ㄴ', 'ㅎ', 'ㄶ'],\r\n            ['ㄹ', 'ㄱ', 'ㄺ'],\r\n            ['ㄹ', 'ㅁ', 'ㄻ'],\r\n            ['ㄹ', 'ㅂ', 'ㄼ'],\r\n            ['ㄹ', 'ㅅ', 'ㄽ'],\r\n            ['ㄹ', 'ㅌ', 'ㄾ'],\r\n            ['ㄹ', 'ㅍ', 'ㄿ'],\r\n            ['ㄹ', 'ㅎ', 'ㅀ'],\r\n            ['ㅂ', 'ㅅ', 'ㅄ']\r\n        ],\r\n        COMPLEX_VOWELS = [\r\n            ['ㅗ', 'ㅏ', 'ㅘ'],\r\n            ['ㅗ', 'ㅐ', 'ㅙ'],\r\n            ['ㅗ', 'ㅣ', 'ㅚ'],\r\n            ['ㅜ', 'ㅓ', 'ㅝ'],\r\n            ['ㅜ', 'ㅔ', 'ㅞ'],\r\n            ['ㅜ', 'ㅣ', 'ㅟ'],\r\n            ['ㅡ', 'ㅣ', 'ㅢ']\r\n        ],\r\n        CONSONANTS_HASH,\r\n        CHO_HASH,\r\n        JUNG_HASH,\r\n        JONG_HASH,\r\n        COMPLEX_CONSONANTS_HASH,\r\n        COMPLEX_VOWELS_HASH\r\n        ;\r\n\r\n    function _makeHash(array) {\r\n        var length = array.length,\r\n            hash = { 0: 0 }\r\n            ;\r\n        for (var i = 0; i < length; i++) {\r\n            if (array[i])\r\n                hash[array[i].charCodeAt(0)] = i;\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    CONSONANTS_HASH = _makeHash(CONSONANTS);\r\n    CHO_HASH = _makeHash(COMPLETE_CHO);\r\n    JUNG_HASH = _makeHash(COMPLETE_JUNG);\r\n    JONG_HASH = _makeHash(COMPLETE_JONG);\r\n\r\n    function _makeComplexHash(array) {\r\n        var length = array.length,\r\n            hash = {},\r\n            code1,\r\n            code2\r\n            ;\r\n        for (var i = 0; i < length; i++) {\r\n            code1 = array[i][0].charCodeAt(0);\r\n            code2 = array[i][1].charCodeAt(0);\r\n            if (typeof hash[code1] === 'undefined') {\r\n                hash[code1] = {};\r\n            }\r\n            hash[code1][code2] = array[i][2].charCodeAt(0);\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    COMPLEX_CONSONANTS_HASH = _makeComplexHash(COMPLEX_CONSONANTS);\r\n    COMPLEX_VOWELS_HASH = _makeComplexHash(COMPLEX_VOWELS);\r\n\r\n    function _isConsonant(c) {\r\n        return typeof CONSONANTS_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isCho(c) {\r\n        return typeof CHO_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isJung(c) {\r\n        return typeof JUNG_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isJong(c) {\r\n        return typeof JONG_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isHangul(c /* code number */) {\r\n        return 0xAC00 <= c && c <= 0xd7a3;\r\n    }\r\n\r\n    function _isJungJoinable(a, b) {\r\n        return (COMPLEX_VOWELS_HASH[a] && COMPLEX_VOWELS_HASH[a][b]) ? COMPLEX_VOWELS_HASH[a][b] : false;\r\n    }\r\n\r\n    function _isJongJoinable(a, b) {\r\n        return COMPLEX_CONSONANTS_HASH[a] && COMPLEX_CONSONANTS_HASH[a][b] ? COMPLEX_CONSONANTS_HASH[a][b] : false;\r\n    }\r\n\r\n    var disassemble = function (string, grouped) {\r\n        if (string === null) {\r\n            throw new Error('Arguments cannot be null');\r\n        }\r\n\r\n        if (typeof string === 'object') {\r\n            string = string.join('');\r\n        }\r\n\r\n        var result = [],\r\n            length = string.length,\r\n            cho,\r\n            jung,\r\n            jong,\r\n            code,\r\n            r\r\n            ;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var temp = [];\r\n\r\n            code = string.charCodeAt(i);\r\n            if (_isHangul(code)) { // 완성된 한글이면\r\n                code -= HANGUL_OFFSET;\r\n                jong = code % 28;\r\n                jung = (code - jong) / 28 % 21;\r\n                cho = parseInt((code - jong) / 28 / 21);\r\n                temp.push(CHO[cho]);\r\n                if (typeof JUNG[jung] === 'object') {\r\n                    temp = temp.concat(JUNG[jung]);\r\n                } else {\r\n                    temp.push(JUNG[jung]);\r\n                }\r\n                if (jong > 0) {\r\n                    if (typeof JONG[jong] === 'object') {\r\n                        temp = temp.concat(JONG[jong]);\r\n                    } else {\r\n                        temp.push(JONG[jong]);\r\n                    }\r\n                }\r\n            } else if (_isConsonant(code)) { //자음이면\r\n                if (_isCho(code)) {\r\n                    r = CHO[CHO_HASH[code]];\r\n                } else {\r\n                    r = JONG[JONG_HASH[code]];\r\n                }\r\n                if (typeof r === 'string') {\r\n                    temp.push(r);\r\n                } else {\r\n                    temp = temp.concat(r);\r\n                }\r\n            } else if (_isJung(code)) {\r\n                r = JUNG[JUNG_HASH[code]];\r\n                if (typeof r === 'string') {\r\n                    temp.push(r);\r\n                } else {\r\n                    temp = temp.concat(r);\r\n                }\r\n            } else {\r\n                temp.push(string.charAt(i));\r\n            }\r\n\r\n            if (grouped) result.push(temp);\r\n            else result = result.concat(temp);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    var disassembleToString = function (str) {\r\n        if (typeof str !== 'string') {\r\n            return '';\r\n        }\r\n        str = disassemble(str);\r\n        return str.join('');\r\n    };\r\n\r\n    var assemble = function (array) {\r\n        if (typeof array === 'string') {\r\n            array = disassemble(array);\r\n        }\r\n\r\n        var result = [],\r\n            length = array.length,\r\n            code,\r\n            stage = 0,\r\n            complete_index = -1, //완성된 곳의 인덱스\r\n            previous_code,\r\n            jong_joined = false\r\n            ;\r\n\r\n        function _makeHangul(index) { // complete_index + 1부터 index까지를 greedy하게 한글로 만든다.\r\n            var code,\r\n                cho,\r\n                jung1,\r\n                jung2,\r\n                jong1 = 0,\r\n                jong2,\r\n                hangul = ''\r\n                ;\r\n\r\n            jong_joined = false;\r\n            if (complete_index + 1 > index) {\r\n                return;\r\n            }\r\n            for (var step = 1; ; step++) {\r\n                if (step === 1) {\r\n                    cho = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJung(cho)) { // 첫번째 것이 모음이면 1) ㅏ같은 경우이거나 2) ㅙ같은 경우이다\r\n                        if (complete_index + step + 1 <= index && _isJung(jung1 = array[complete_index + step + 1].charCodeAt(0))) { //다음것이 있고 모음이면\r\n                            result.push(String.fromCharCode(_isJungJoinable(cho, jung1)));\r\n                            complete_index = index;\r\n                            return;\r\n                        } else {\r\n                            result.push(array[complete_index + step]);\r\n                            complete_index = index;\r\n                            return;\r\n                        }\r\n                    } else if (!_isCho(cho)) {\r\n                        result.push(array[complete_index + step]);\r\n                        complete_index = index;\r\n                        return;\r\n                    }\r\n                    hangul = array[complete_index + step];\r\n                } else if (step === 2) {\r\n                    jung1 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isCho(jung1)) { //두번째 또 자음이 오면 ㄳ 에서 ㅅ같은 경우이다\r\n                        cho = _isJongJoinable(cho, jung1);\r\n                        hangul = String.fromCharCode(cho);\r\n                        result.push(hangul);\r\n                        complete_index = index;\r\n                        return;\r\n                    } else {\r\n                        hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + HANGUL_OFFSET);\r\n                    }\r\n                } else if (step === 3) {\r\n                    jung2 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJungJoinable(jung1, jung2)) {\r\n                        jung1 = _isJungJoinable(jung1, jung2);\r\n                    } else {\r\n                        jong1 = jung2;\r\n                    }\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                    \r\n                } else if (step === 4) {\r\n                    jong2 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJongJoinable(jong1, jong2)) {\r\n                        jong1 = _isJongJoinable(jong1, jong2);\r\n                    } else {\r\n                        jong1 = jong2;\r\n                    }\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                } else if (step === 5) {\r\n                    jong2 = array[complete_index + step].charCodeAt(0);\r\n                    jong1 = _isJongJoinable(jong1, jong2);\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                }\r\n\r\n                if (complete_index + step >= index) {\r\n                    result.push(hangul);\r\n                    complete_index = index;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            code = array[i].charCodeAt(0);\r\n            if (!_isCho(code) && !_isJung(code) && !_isJong(code)) { //초, 중, 종성 다 아니면\r\n                _makeHangul(i - 1);\r\n                _makeHangul(i);\r\n                stage = 0;\r\n                continue;\r\n            }\r\n            //console.log(stage, array[i]);\r\n            if (stage === 0) { // 초성이 올 차례\r\n                if (_isCho(code)) { // 초성이 오면 아무 문제 없다.\r\n                    stage = 1;\r\n                } else if (_isJung(code)) {\r\n                    // 중성이오면 ㅐ 또는 ㅘ 인것이다. 바로 구분을 못한다. 따라서 특수한 stage인 stage4로 이동\r\n                    stage = 4;\r\n                }\r\n            } else if (stage == 1) { //중성이 올 차례\r\n                if (_isJung(code)) { //중성이 오면 문제없음 진행.\r\n                    stage = 2;\r\n                } else { //아니고 자음이오면 ㄻ같은 경우가 있고 ㄹㅋ같은 경우가 있다.\r\n                    if (_isJongJoinable(previous_code, code)) {\r\n                        // 합쳐질 수 있다면 ㄻ 같은 경우인데 이 뒤에 모음이 와서 ㄹ마 가 될수도 있고 초성이 올 수도 있다. 따라서 섣불리 완성할 수 없다. 이땐 stage5로 간다.\r\n                        stage = 5;\r\n                    } else { //합쳐질 수 없다면 앞 글자 완성 후 여전히 중성이 올 차례\r\n                        _makeHangul(i - 1);\r\n                    }\r\n                }\r\n            } else if (stage == 2) { //종성이 올 차례\r\n                if (_isJong(code)) { //종성이 오면 다음엔 자음 또는 모음이 온다.\r\n                    stage = 3;\r\n                } else if (_isJung(code)) { //그런데 중성이 오면 앞의 모음과 합칠 수 있는지 본다.\r\n                    if (_isJungJoinable(previous_code, code)) { //합칠 수 있으면 여전히 종성이 올 차례고 그대로 진행\r\n                    } else { // 합칠 수 없다면 오타가 생긴 경우\r\n                        _makeHangul(i - 1);\r\n                        stage = 4;\r\n                    }\r\n                } else { // 받침이 안되는 자음이 오면 ㄸ 같은 이전까지 완성하고 다시시작\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            } else if (stage == 3) { // 종성이 하나 온 상태.\r\n                if (_isJong(code)) { // 또 종성이면 합칠수 있는지 본다.\r\n                    if (!jong_joined && _isJongJoinable(previous_code, code)) { //합칠 수 있으면 계속 진행. 왜냐하면 이번에 온 자음이 다음 글자의 초성이 될 수도 있기 때문. 대신 이 기회는 한번만\r\n                        jong_joined = true;\r\n                    } else { //없으면 한글자 완성\r\n                        _makeHangul(i - 1);\r\n                        stage = 1; // 이 종성이 초성이 되고 중성부터 시작\r\n                    }\r\n                } else if (_isCho(code)) { // 초성이면 한글자 완성.\r\n                    _makeHangul(i - 1);\r\n                    stage = 1; //이 글자가 초성이되므로 중성부터 시작\r\n                } else if (_isJung(code)) { // 중성이면 이전 종성은 이 중성과 합쳐지고 앞 글자는 받침이 없다.\r\n                    _makeHangul(i - 2);\r\n                    stage = 2;\r\n                }\r\n            } else if (stage == 4) { // 중성이 하나 온 상태\r\n                if (_isJung(code)) { //중성이 온 경우\r\n                    if (_isJungJoinable(previous_code, code)) { //이전 중성과 합쳐질 수 있는 경우\r\n                        _makeHangul(i);\r\n                        stage = 0;\r\n                    } else { //중성이 왔지만 못합치는 경우. ㅒㅗ 같은\r\n                        _makeHangul(i - 1);\r\n                    }\r\n                } else { // 아니면 자음이 온 경우.\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            } else if (stage == 5) { // 초성이 연속해서 두개 온 상태 ㄺ\r\n                if (_isJung(code)) { //이번에 중성이면 ㄹ가\r\n                    _makeHangul(i - 2);\r\n                    stage = 2;\r\n                } else {\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            }\r\n            previous_code = code;\r\n        }\r\n        _makeHangul(i - 1);\r\n        return result.join('');\r\n    };\r\n\r\n    var search = function (a, b) {\r\n        var ad = disassemble(a).join(''),\r\n            bd = disassemble(b).join('')\r\n            ;\r\n\r\n        return ad.indexOf(bd);\r\n    };\r\n\r\n    var rangeSearch = function (haystack, needle) {\r\n        var hex = disassemble(haystack).join(''),\r\n            nex = disassemble(needle).join(''),\r\n            grouped = disassemble(haystack, true),\r\n            re = new RegExp(nex, 'gi'),\r\n            indices = [],\r\n            result;\r\n\r\n        if (!needle.length) return [];\r\n\r\n        while ((result = re.exec(hex))) {\r\n            indices.push(result.index);\r\n        }\r\n\r\n        function findStart(index) {\r\n            for (var i = 0, length = 0; i < grouped.length; ++i) {\r\n                length += grouped[i].length;\r\n                if (index < length) return i;\r\n            }\r\n        }\r\n\r\n        function findEnd(index) {\r\n            for (var i = 0, length = 0; i < grouped.length; ++i) {\r\n                length += grouped[i].length;\r\n                if (index + nex.length <= length) return i;\r\n            }\r\n        }\r\n\r\n        return indices.map(function (i) {\r\n            return [findStart(i), findEnd(i)];\r\n        });\r\n    };\r\n\r\n    function Searcher(string) {\r\n        this.string = string;\r\n        this.disassembled = disassemble(string).join('');\r\n    }\r\n\r\n    Searcher.prototype.search = function (string) {\r\n        return disassemble(string).join('').indexOf(this.disassembled);\r\n    };\r\n    var endsWithConsonant = function (string) {\r\n        if (typeof string === 'object') {\r\n            string = string.join('');\r\n        }\r\n\r\n        var code = string.charCodeAt(string.length - 1);\r\n\r\n        if (_isHangul(code)) { // 완성된 한글이면\r\n            code -= HANGUL_OFFSET;\r\n            var jong = code % 28;\r\n            if (jong > 0) {\r\n                return true;\r\n            }\r\n        } else if (_isConsonant(code)) { //자음이면\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    var endsWith = function (string, target) {\r\n        return disassemble(string).pop() === target;\r\n    };\r\n\r\n\r\n    var hangul = {\r\n        disassemble: disassemble,\r\n        d: disassemble, // alias for disassemble\r\n        disassembleToString: disassembleToString,\r\n        ds: disassembleToString, // alias for disassembleToString\r\n        assemble: assemble,\r\n        a: assemble, // alias for assemble\r\n        search: search,\r\n        rangeSearch: rangeSearch,\r\n        Searcher: Searcher,\r\n        endsWithConsonant: endsWithConsonant,\r\n        endsWith: endsWith,\r\n        isHangul: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isHangul(c);\r\n        },\r\n        isComplete: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isHangul(c);\r\n        },\r\n        isConsonant: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isConsonant(c);\r\n        },\r\n        isVowel: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isJung(c);\r\n        },\r\n        isCho: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isCho(c);\r\n        },\r\n        isJong: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isJong(c);\r\n        },\r\n        isHangulAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isHangul(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isCompleteAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isHangul(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isConsonantAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isConsonant(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isVowelAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isJung(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isChoAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isCho(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isJongAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isJong(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n\r\n    if (typeof define == 'function' && define.amd) {\r\n        define(function () {\r\n            return hangul;\r\n        });\r\n    } else if (typeof module !== 'undefined') {\r\n        module.exports = hangul;\r\n    } else {\r\n        window.Hangul = hangul;\r\n    }\r\n})();\r\n\r\n"],"names":["allWords","isLoading","setLoading","useState","currentWord","setCurrentWord","currentDecompo","setDecomposition","pickRandomWord","length","index","Math","trunc","random","console","log","pickedWord","word","jamo","Hangul","Set","decomposeWord","useEffect","async","fetch","then","f","text","t","split","slice","fetchWords","result","catch","error","id","map","j","key","className","onClick","utterance","SpeechSynthesisUtterance","volume","speechSynthesis","speak","speakWord","Head","name","content","CONSONANTS_HASH","CHO_HASH","JUNG_HASH","JONG_HASH","COMPLEX_CONSONANTS_HASH","COMPLEX_VOWELS_HASH","CHO","JUNG","JONG","HANGUL_OFFSET","_makeHash","array","hash","i","charCodeAt","_makeComplexHash","code1","code2","_isConsonant","c","_isCho","_isJung","_isJong","_isHangul","_isJungJoinable","a","b","_isJongJoinable","disassemble","string","grouped","Error","join","cho","jung","jong","code","r","temp","parseInt","push","concat","charAt","disassembleToString","str","assemble","previous_code","stage","complete_index","jong_joined","_makeHangul","jung1","jung2","jong2","jong1","hangul","step","String","fromCharCode","Searcher","this","disassembled","prototype","search","indexOf","d","ds","ad","bd","rangeSearch","haystack","needle","hex","nex","re","RegExp","indices","exec","findStart","findEnd","endsWithConsonant","endsWith","target","pop","isHangul","isComplete","isConsonant","isVowel","isCho","isJong","isHangulAll","isCompleteAll","isConsonantAll","isVowelAll","isChoAll","isJongAll"],"sourceRoot":""}